#version 330 core
out vec4 FragColor;

in vec3 FragPos;  
in vec3 Normal;
in vec2 TexCoords;

uniform float time;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 cameraPos;
};

uniform Light light;

struct Material {
    sampler2D	diffuse;
    float		shininess;
}; 

uniform Material material;

vec3 resultLight()
{
	
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

	vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);  
	float diff = max(dot(norm, lightDir), 0.0);

	
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.diffuse, TexCoords));
	

	vec3 viewDir = normalize(light.cameraPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * vec3(texture(material.diffuse, TexCoords));  

	vec3 resultColor = ambient + diffuse;
	
	return resultColor;
	
}

void main()
{
	vec3 lightColor = resultLight();
	
	FragColor = vec4(lightColor,1);
	
}